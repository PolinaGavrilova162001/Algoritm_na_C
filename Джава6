import java.util.*;

class Fraction implements Comparable<Fraction> {
    private int numerator;
    private int denominator;

    public Fraction(int numerator, int denominator) {
        if (denominator == 0) {
            throw new IllegalArgumentException("Denominator cannot be zero");
        }
        this.numerator = numerator;
        this.denominator = denominator;
        simplify();
    }

    private void simplify() {
        int gcd = gcd(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }

    @Override
    public int compareTo(Fraction o) {
        return Integer.compare(this.numerator * o.denominator, this.denominator * o.numerator);
    }

    @Override
    public String toString() {
        return numerator + "/" + denominator;
    }

    public double value() {
        return (double) this.numerator / this.denominator;
    }

    public double absoluteValue() {
        return Math.abs(value());
    }

    public static void main(String[] args) {
        List<Fraction> fractions = new ArrayList<>();
        fractions.add(new Fraction(1, 2));
        fractions.add(new Fraction(3, 4));
        fractions.add(new Fraction(1, 3));
        fractions.add(new Fraction(5, 6));

        System.out.println("По возрастанию:");
        Collections.sort(fractions);
        System.out.println(fractions);

        System.out.println("По убыванию:");
        Collections.sort(fractions, Collections.reverseOrder());
        System.out.println(fractions);

        System.out.println("По возрастанию абсолютных значений:");
        Collections.sort(fractions, Comparator.comparingDouble(Fraction::absoluteValue));
        System.out.println(fractions);

        System.out.println("По убыванию абсолютных значений:");
        Collections.sort(fractions, Comparator.comparingDouble(Fraction::absoluteValue).reversed());
        System.out.println(fractions);
    }
}

import java.util.PriorityQueue;
import java.util.Comparator;

enum Priority {
    NORMAL, POLICE, MEDICAL
}

class Car {
    private String name;
    private Priority priority;

    public Car(String name, Priority priority) {
        this.name = name;
        this.priority = priority;
    }

    public Priority getPriority() {
        return priority;
    }

    @Override
    public String toString() {
        return name + " (" + priority + ")";
    }

    public static void main(String[] args) {
        // Вариант 1: Медицинский автомобиль имеет высший приоритет
        Comparator<Car> medicalPriorityComparator = (car1, car2) -> {
            return Integer.compare(car2.getPriority().ordinal(),
                                   car1.getPriority().ordinal());
        };

        PriorityQueue<Car> queue1 = new PriorityQueue<>(medicalPriorityComparator);

        queue1.add(new Car("Police Car 1", Priority.POLICE));
        queue1.add(new Car("Medical Car 1", Priority.MEDICAL));
        queue1.add(new Car("Normal Car 1", Priority.NORMAL));
        queue1.add(new Car("Medical Car 2", Priority.MEDICAL));
        queue1.add(new Car("Police Car 2", Priority.POLICE));

        System.out.println("Заправка по приоритету: Медицинский -> Полиция -> Обычный");
        while (!queue1.isEmpty()) {
            System.out.println(queue1.poll());
        }

        // Вариант 2: Полиция имеет высший приоритет
        Comparator<Car> policePriorityComparator = (car1, car2) -> {
            if (car1.getPriority() == car2.getPriority()) {
                return 0;
            } else if (car1.getPriority() == Priority.POLICE) {
                return -1;
            } else if (car2.getPriority() == Priority.POLICE) {
                return 1;
            } else {
                return Integer.compare(car2.getPriority().ordinal(),
                                       car1.getPriority().ordinal());
            }
        };

        PriorityQueue<Car> queue2 = new PriorityQueue<>(policePriorityComparator);

        queue2.add(new Car("Police Car 1", Priority.POLICE));
        queue2.add(new Car("Medical Car 1", Priority.MEDICAL));
        queue2.add(new Car("Normal Car 1", Priority.NORMAL));
        queue2.add(new Car("Medical Car 2", Priority.MEDICAL));
        queue2.add(new Car("Police Car 2", Priority.POLICE));

        System.out.println("\nЗаправка по приоритету: Полиция -> Медицинский -> Обычный");
        while (!queue2.isEmpty()) {
            System.out.println(queue2.poll());
        }
    }
}

import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.concurrent.atomic.AtomicInteger;

enum Priority {
    NORMAL, POLICE, MEDICAL
}

class Car {
    private static final AtomicInteger count = new AtomicInteger(0); // Счетчик для уникального ID
    private final int id;
    private final String name;
    private final Priority priority;

    public Car(String name, Priority priority) {
        this.id = count.incrementAndGet();
        this.name = name;
        this.priority = priority;
    }

    public Priority getPriority() {
        return priority;
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return name + " (" + priority + ")";
    }

    public static void main(String[] args) {
        // Вариант 1: Медицинский автомобиль имеет высший приоритет
        Comparator<Car> medicalPriorityComparator = (car1, car2) -> {
            if (car1.getPriority() == car2.getPriority()) {
                return Integer.compare(car1.getId(), car2.getId()); // Первым пришел, первым обслуживается
            }
            return Integer.compare(car2.getPriority().ordinal(),
                                   car1.getPriority().ordinal());
        };

        PriorityQueue<Car> queue1 = new PriorityQueue<>(medicalPriorityComparator);

        queue1.add(new Car("Police Car 1", Priority.POLICE));
        queue1.add(new Car("Medical Car 1", Priority.MEDICAL));
        queue1.add(new Car("Normal Car 1", Priority.NORMAL));
        queue1.add(new Car("Medical Car 2", Priority.MEDICAL));
        queue1.add(new Car("Police Car 2", Priority.POLICE));

        System.out.println("Заправка по приоритету: Медицинский -> Полиция -> Обычный");
        while (!queue1.isEmpty()) {
            System.out.println(queue1.poll());
        }

        // Вариант 2: Полиция имеет высший приоритет
        Comparator<Car> policePriorityComparator = (car1, car2) -> {
            if (car1.getPriority() == car2.getPriority()) {
                return Integer.compare(car1.getId(), car2.getId());
            } else if (car1.getPriority() == Priority.POLICE) {
                return -1;
            } else if (car2.getPriority() == Priority.POLICE) {
                return 1;
            } else {
                return Integer.compare(car2.getPriority().ordinal(),
                                       car1.getPriority().ordinal());
            }
        };

        PriorityQueue<Car> queue2 = new PriorityQueue<>(policePriorityComparator);

        queue2.add(new Car("Police Car 1", Priority.POLICE));
        queue2.add(new Car("Medical Car 1", Priority.MEDICAL));
        queue2.add(new Car("Normal Car 1", Priority.NORMAL));
        queue2.add(new Car("Medical Car 2", Priority.MEDICAL));
        queue2.add(new Car("Police Car 2", Priority.POLICE));

        System.out.println("\nЗаправка по приоритету: Полиция -> Медицинский -> Обычный");
        while (!queue2.isEmpty()) {
            System.out.println(queue2.poll());
        }
    }
}
